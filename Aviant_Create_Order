import functions_framework
import hmac
import hashlib
import time
import os
import json
from flask import jsonify, request
from api_module import check_availability_and_create_job
from slack_update import update_slack_message

@functions_framework.http
def aviant_create_order_test(request):
    # Retrieve Slack signing secret from environment variables
    slack_signing_secret = os.environ.get("SLACK_SIGNING_SECRET")
    if not slack_signing_secret:
        return jsonify({"error": "Missing Slack signing secret"}), 401

    # Retrieve Slack headers for validation
    slack_signature = request.headers.get('X-Slack-Signature')
    slack_request_timestamp = request.headers.get('X-Slack-Request-Timestamp')

    # Validate presence of headers
    if not slack_signature or not slack_request_timestamp:
        return jsonify({"error": "Missing Slack headers"}), 401

    # Prevent replay attacks
    if abs(time.time() - int(slack_request_timestamp)) > 60 * 5:
        return jsonify({"error": "Invalid timestamp"}), 401

    # Verify Slack signature
    sig_basestring = f'v0:{slack_request_timestamp}:{request.get_data().decode("utf-8")}'
    my_signature = 'v0=' + hmac.new(
        slack_signing_secret.encode(),
        sig_basestring.encode(),
        hashlib.sha256
    ).hexdigest()

    if not hmac.compare_digest(my_signature, slack_signature):
        return jsonify({"error": "Invalid signature"}), 401

    try:
        # Extract the payload from the form-encoded data
        slack_payload = request.form.get("payload")
        if not slack_payload:
            return jsonify({"error": "Missing or invalid payload"}), 400

        # Parse the Slack message JSON
        slack_message = json.loads(slack_payload)
        if not slack_message:
            return jsonify({"error": "Invalid Slack payload"}), 400

        # Extract the response URL
        response_url = slack_message.get("response_url")
        if not response_url:
            return jsonify({"error": "Missing response URL"}), 400

        blocks = slack_message["message"]["blocks"]

        # Extract original blocks
        original_blocks = slack_message["message"]["blocks"]
        lat, lng, order_id = None, None, None

        # Iterate over blocks to find required fields
        for block in blocks:
            if block["type"] == "section" and "fields" in block:
                for field in block["fields"]:
                    text = field["text"]

                    # Extract Latitude and Longitude
                    if "Latitude" in text and "Longitude" in text:
                        lat_line = [line for line in text.split('\n') if "Latitude" in line][0]
                        lng_line = [line for line in text.split('\n') if "Longitude" in line][0]
                        lat = float(lat_line.split("*")[1])
                        lng = float(lng_line.split("*")[1])

                    # Example: Extract order_id if included in a field
                    if "Order ID" in text:
                        order_id_line = [line for line in text.split('\n') if "Order ID" in line][0]
                        order_id = order_id_line.split("*")[1]  # Adjust split logic if necessary

        # Ensure all required fields are present
        if lat is None or lng is None:
            return jsonify({"error": "Latitude or Longitude missing"}), 400

        if order_id is None:
            return jsonify({"error": "Order ID missing"}), 400

        # Construct payload for the API function
        request_payload = {
            "destination": {
                "coordinates": {
                    "lat": lat,
                    "lng": lng
                }
            },
            "order_id": order_id
        }

        print(f"Constructed Request Payload: {request_payload}")

        # Call the downstream function
        api_response, status_code = check_availability_and_create_job(request_payload)
        
        # Update Slack message
        update_slack_message(response_url, api_response, original_blocks)

        return jsonify(api_response), status_code

    except KeyError as e:
        print(f"KeyError: {e}")
        return jsonify({"error": "Missing data in Slack message"}), 400
    except Exception as e:
        print(f"Error: {e}")
        return jsonify({"error": "An error occurred"}), 500
